// Simple texture map shader

// World-view-projection transformation.
uniform mat4 gWVPXf : WorldViewProjection;


uniform texture2D gTexture  <
  string ResourceName = "";
  string ResourceType = "2D";
  string UIName = "Input Texture";
>;

uniform sampler2D gTextureSamp = sampler_state
{
  texture = <gTexture>;
};

uniform texture2D gMojoBackgroundTexture  <
  string ResourceName = "";
  string ResourceType = "2D";
  string UIName = "Mojo Background Texture";
>;

uniform sampler2D gMojoBackgroundTextureSamp = sampler_state
{
  texture = <gMojoBackgroundTexture>;
};

uniform float lightingWeight <
 string UIName = "Lighting Weight"; 
 > = 1.0f;
 
uniform float paintReferenceIntensity <
 string UIName = "Paint Reference Intensity"; 
 > = 0.5f;
 
uniform float imageReferenceIntensity <
 string UIName = "Image Reference Intensity"; 
 > = 0.5f;
 
// Vertex shader input structure.
attribute VS_INPUT
{
  vec3 Pos : POSITION;
  vec2 inUV : TEXCOORD0;
}

// Vertex shader output structure.
attribute VS_TO_PS
{
  // The vertex position in clip space.
  vec2 UV;
  vec2 backgroundTexcoord;
}

attribute pixelOut 
{
  vec4 colorOut:COLOR0;
}

// Vertex shader.
GLSLShader VS
{
  void main()
  {		
    gl_Position = gWVPXf * vec4(Pos, 1);
    UV =  inUV;
    // texture is flipped
    UV.y = 1.0 - UV.y;
    backgroundTexcoord = 0.5 * gl_Position.xy / gl_Position.w + 0.5;
    backgroundTexcoord.y = 1.0 - backgroundTexcoord.y;
  }
}

// Pixel shader for normal visualization.
GLSLShader PS
{
  void main()
  {
    const vec3 rgb2grayVec = vec3(0.299, 0.587, 0.114);
    colorOut = texture2D(gTextureSamp, UV);
    vec3 bgColor = texture2D(gMojoBackgroundTextureSamp, backgroundTexcoord).rgb;
    float imgIntensity = dot(rgb2grayVec, bgColor);
    float globalScale = imageReferenceIntensity / paintReferenceIntensity;
    colorOut.rgb = globalScale * colorOut.rgb;
    colorOut.rgb = ((imgIntensity / imageReferenceIntensity - 1.0) * lightingWeight + 1.0)*colorOut.rgb;
    colorOut.rgb = pow(colorOut.rgb * colorOut.a, vec3(2.2));
  }
}

// Techniques.
technique Main
<
//tell Maya to support transparency for this technique
string Transparency = "Transparent";
>
{
  pass p0
  {
    VertexShader (in VS_INPUT, out VS_TO_PS) = VS;
    PixelShader (in VS_TO_PS, out pixelOut) = PS;
  }
}


